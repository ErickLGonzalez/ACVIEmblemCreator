//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: EMBC
//   Authors: B3
//   Version: 1.0
//   Purpose: Emblem data for Armored Core VI
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    ubyte r;
    ubyte g;
    ubyte b;
    ubyte a;
} RGBA;

typedef struct{
    short decalId; // 0x4000 bit encodes 'inverted' toggle
    short posX;    // scaled by 0x10
    short posY;    // scaled by 0x10
    short scaleX;  // scaled by 0x10
    short scaleY;  // scaled by 0x10
    short angle;   // 0-360
    RGBA rgba;
    short maskMode; //0x000 default, 0x0040 toggle once, 0x0080 toggle twice, also gradient
    short pad;
} LayerData<optimize=false,bgcolor=cRed>;

struct Group;

typedef struct{
    LayerData groupData;
    if((groupData.decalId & 0x3F00) == 0x3F00){
        int childCount;
        Group group[childCount];
    }
} Group<optimize=false,bgcolor=cRed>;

typedef struct {
   short unk0;
   short unk1;  
} LayerHeader;

struct Layer;

typedef struct {
    LayerHeader header;
    Assert(header.unk0 == 3); 
    Assert(header.unk1 == 1);
    Group group;
} Layer<optimize=false,bgcolor=cGreen>;

typedef struct {
    short unk0; Assert(unk0 == 0);
    short layerCount;
    Layer layers[layerCount];
} Image <bgcolor=Random(0xFFFFFF), optimize=false>;

typedef struct {
    char name[0x10];
    uint32 size;
    uint32 unk;
    uint64 pad;
    switch(name){
    case "Image":
        Image image;
        break;
    case"Category":
        ubyte userSlot;     
        break;  
    case"CreatorID":
        Assert(size == 0x08);
        int64 steamId;
        break;
    case"UgcID":
        wstring ugcId;  
        break;
    case"DateTime":
        Assert(size == 0x10);
        ubyte dateTime[size];
        break;
    default:
        Assert(size == 0);
    }
} Block <bgcolor=Random(0xFFFFFF), optimize=false>;

while(!FEof()){
    Block block;
}
